name: Memory Check

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  memcheck:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install required packages
      - name: Install Valgrind
        run: sudo apt-get update && sudo apt-get install -y build-essential valgrind curl

      # Build project
      - name: Build project
        run: make

      # Run Valgrind memory check
      - name: Run Valgrind (serve one request, then exit)
        shell: bash
        run: |
          set -euo pipefail
          # Start under Valgrind in background
          WEBSERV_ONCE=1 valgrind --leak-check=full --error-exitcode=123 ./webserv conf/default.conf &
          VG_PID=$!
          # Give Valgrind+binary a moment to initialize before probing
          sleep 1.5
          # Wait for server to be ready (up to ~30s)
          ready=0
          for i in $(seq 1 300); do
            if curl -sSf http://127.0.0.1:8080/ >/dev/null; then
              ready=1
              break
            fi
            sleep 0.1
            done
          if [ "$ready" -ne 1 ]; then
            echo "Server did not become ready in time"
            # Show process info for debugging
            ps -p $VG_PID -o pid,ppid,cmd || true
            # Cleanup
            kill -TERM $VG_PID 2>/dev/null || true
            sleep 1
            kill -KILL $VG_PID 2>/dev/null || true
            wait $VG_PID || true
            exit 1
          fi
          # If still running, ask server to stop (in case single-shot didn't exit)
          if kill -0 $VG_PID 2>/dev/null; then
            kill -INT $VG_PID || true
          fi
          # Give it time to exit cleanly
          for i in $(seq 1 40); do
            if ! kill -0 $VG_PID 2>/dev/null; then
              break
            fi
            sleep 0.1
          done
          # Force kill if still running (should still preserve Valgrind's leak check result)
          if kill -0 $VG_PID 2>/dev/null; then
            kill -KILL $VG_PID || true
          fi
          # Propagate Valgrind exit status (will be 123 if leaks were found)
          wait $VG_PID

